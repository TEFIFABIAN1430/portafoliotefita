import React from "react";
import Head from "next/head";
import fonts from "../styles/Fonts.module.css";
import { data } from "../data/data.js";
import Image from "next/image";
import { useRouter } from "next/router";
import Title from "../components/title";
import LabelArticle from "../components/labelarticle";
import { Carousel } from "react-responsive-carousel";
import "react-responsive-carousel/lib/styles/carousel.min.css";


export default function Semana() {
  const id = useRouter().query.id;
  const pageTitle = "Portafolio - Semana " + id;
  let dataGet = data[id - 1];

  return (
    <>
      <Head>
        <title>{pageTitle}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link
          rel="icon"
          href="https://brathkennet.github.io/career-portfolio/icons/favicon.ico"
        />
      </Head>
      <article
        className="min-h-screen bg-[#13000E] z-20 pt-36 pb-10 sm:px-28 px-8 max-w-screen text-white"
        id="inits"
      >
        {dataGet ? (
          <div className="mx-auto p-4 sm:px-6 mt-5 h-full">
            {/* Presentación */}
            <section className="max-w-sm mx-auto md:max-w-none grid md:grid-cols-2 gap-6 md:gap-8 lg:gap-12 xl:gap-28 items-center">
              <div className="relative block group" data-aos="zoom-in-right">
                <div
                  className="absolute inset-0 bg-[#C00B62] hidden md:block transform md:translate-y-2 md:translate-x-4 xl:translate-y-4 xl:translate-x-8 group-hover:translate-x-0 group-hover:translate-y-0 transition duration-700 ease-out pointer-events-none"
                  aria-hidden="true"
                ></div>
                <figure className="relative h-0 pb-[56.25%] md:pb-[75%] lg:pb-[56.25%] overflow-hidden transform md:-translate-y-2 xl:-translate-y-4 group-hover:translate-x-0 group-hover:translate-y-0 transition duration-700 ease-out">
                  <Image
                    className="absolute inset-0 w-full h-full  object-cover transform hover:scale-105 transition duration-700 ease-out"
                    src={dataGet.img_principal}
                    width="540"
                    height="303"
                    alt="imagen seccion"
                  />
                </figure>
              </div>
              <div data-aos="zoom-in-left">
                <header>
                  <div className="mb-3">
                    <ul className="flex flex-wrap text-xs font-medium -m-1">
                      {dataGet.labels.map((label) => (
                        <LabelArticle
                          key={label.name}
                          name={label.name}
                          color={label.color}
                        />
                      ))}
                    </ul>
                  </div>
                  <h3
                    className={`md:text-[30px] text-[23px] text-[#C00B62] font-bold mb-2 mt-8  ${fonts.font_lilita}`}
                  >
                    {dataGet.theme}
                  </h3>
                </header>
                <p
                  className={`text-xl text-gray-200 flex-grow ${fonts.font_bree}`}
                >
                  {dataGet.description}
                </p>
                <footer className="flex items-center mt-4 w-fit text-gray-400 hover:text-gray-100 transition duration-150 ease-in-out">
                  <div>
                    <span className={`font-medium ${fonts.font_bree}`}>
                      Semana {dataGet.number}
                    </span>
                  </div>
                </footer>
              </div>
            </section>
            {/* Contenido */}
            {dataGet.content && (
              <section className=" md:mt-24 mt-10 md:mx-8" data-aos="fade-up">
                <div
                  className={`text-base text-white text-justify ${fonts.font_bree}`}
                >
                  {dataGet.content.split("\n").map((line, index) => {
                    if (line.startsWith("-")) {
                      return (
                        <li key={index}>
                          {line.substring(1)}
                          <p className="pb-3"></p>
                        </li>
                      );
                    }
                    if (line.startsWith("\t")) {
                      return (
                        <div
                          key={index}
                          className=" text-lg font-bold tracking-wide text-[#C00B62]"
                        >
                          <p className="pt-5"></p>
                          {line.substring(1)}
                          <p className="pb-5"></p>
                        </div>
                      );
                    }
                    return (
                      <div key={index}>
                        {line} <p className="pb-3"></p>
                      </div>
                    );
                  })}
                </div>
              </section>
            )}
            {/* Definiciones */}
            {dataGet.definition && (
              <section className="text-white mt-16 md:mx-8">
                <Title text={"Definiciones"} right={true} />
                <div className="flex flex-col gap-4 h-auto mt-16 items-center justify-center">
                  {dataGet.definition.map((word) => (
                    <div
                      key={word.name}
                      className="w-full flex justify-center my-1"
                      data-aos="fade-up"
                    >
                      <div
                        className={`w-[90%] grid grid-cols-12 border border-[#C00B62] rounded-lg p-3 gap-2 items-center  transition delay-150 duration-300 ease-in-out hover:scale-105 transform ${fonts.font_bree} text-lg `}
                      >
                        <div className="col-span-12 md:col-span-1">
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            className="h-8 w-8"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="#C00B62"
                          >
                            <path
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              strokeWidth="2"
                              d="M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2h-2M8 7H6a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2v-2"
                            />
                          </svg>
                        </div>

                        <div className="col-span-11 xl:-ml-5">
                          <p className="text-[#C00B62] font-semibold">
                            {word.name}
                          </p>
                        </div>
                        <div className="md:col-start-2 col-span-11 xl:-ml-5">
                          <p className="text-base text-white ">{word.notion}</p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </section>
            )}
            {/* Ejercicios */}
            {dataGet.exercise_d && (
              <section className="mt-20 md:mx-8">
                <Title text={"Ejercicios"} right={true} />
                <div
                  className={`mt-16 md:mx-2 text-base ${fonts.font_bree}`}
                  data-aos="fade-up"
                >
                  {dataGet.exercise_d}
                </div>
                <div className="mt-16" data-aos="fade-up">
                  <Carousel className="md:w-[85%] mx-auto">
                    {dataGet.exercises.map((exercise) => (
                      <div key={exercise.alt}>
                        <Image
                          src={exercise.img}
                          className="max-h-[650px] min-h-[300px]"
                          alt="Image 1"
                          width={2000}
                          height={2000}
                        />
                        <p className={`legend ${fonts.font_bree} text-base`}>
                          {exercise.content}
                        </p>
                      </div>
                    ))}
                  </Carousel>
                </div>
              </section>
            )}
            {/* Reflexión */}
            {dataGet.reflect && (
              <section className="mt-20 md:mx-8">
                <div
                  className={`bg-white/[.15] rounded md:p-8 p-5 border-l-8 border-[#C00B62] h-auto text-white text-base text-justify ${fonts.font_bree}`}
                  data-aos="fade-up"
                >
                  {dataGet.reflect.split("\n").map((line, index) => (
                    <div key={index}>
                      {line} <p className="pb-3"></p>
                    </div>
                  ))}
                </div>
              </section>
            )}
          </div>
        ) : (
          <div
            className={`text-white text-center h-[70vh] text-4xl flex items-stretch ${fonts.font_lilita}`}
          >
            <div className="self-center mx-auto">
              No hay datos
            </div>
          </div>
        )}
      </article>
    </>
  );
}

/* export async function getStaticProps(context) {
  const { id } = context.query;
  let dataGet = data[id - 1];
  if (dataGet === undefined) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  } else {
    return {
      props: {
        dataGet,
      },
    };
  }
} */
